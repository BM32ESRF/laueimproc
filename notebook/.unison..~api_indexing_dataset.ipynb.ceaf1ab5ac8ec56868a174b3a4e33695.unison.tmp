{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a41d25e7",
   "metadata": {},
   "source": [
    "## This notebook shows all the means to index the diagrams in DiagramDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1bce8bd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pathlib\n",
    "import shutil\n",
    "import tempfile\n",
    "import time\n",
    "\n",
    "from laueimproc.io.download import get_samples  # gives access to the dataset\n",
    "from laueimproc import Diagram, DiagramDataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99f6b058",
   "metadata": {},
   "source": [
    "### Link the diagram instance to the index.\n",
    "* If the index is contained in the diagram file name, so skip this step, the diagrams will be indexed automatically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8f8653e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# it is possible to overwritten laueimproc.classes.dataset.default_diag2ind\n",
    "\n",
    "def stupid_diag2ind(diagram: Diagram) -> int:\n",
    "    \"\"\"Take a diagram and return the index.\"\"\"\n",
    "    return int(diagram.file.name[-6:-4])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "599f00a5",
   "metadata": {},
   "source": [
    "### Set the geometry of the grid.\n",
    "* This step is optional, but allows you to acces the element from the real sample position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1604b029",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1 : define the rule that maps a diagram index its position in 2 dimensions\n",
    "\n",
    "def position_func(index: int) -> tuple[float, float]:  # can return tuple[int, int]\n",
    "    \"\"\"Return the position x, y of the diagram in micron.\"\"\"\n",
    "    y_ind, x_ind = divmod(index, 20)  # assume grid shape is 20 x 5 samples\n",
    "    x_micron = 20.0 * x_ind  # assume x step is 20 microns (fast index)\n",
    "    y_micron = 30.0 * y_ind  # assume y step is 30 microns (slow index)\n",
    "    return x_micron, y_micron  # must to return 2 numbers\n",
    "\n",
    "# 2 : simply provide the argument position=position_func so that the DiagramDataset integrates the positions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fff6a73",
   "metadata": {},
   "source": [
    "### Init a diagram, see the `api_init_dataset` notebook for more informations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e664360",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<DiagramDataset(Thread-8, started daemon 140324783515200)>\n"
     ]
    }
   ],
   "source": [
    "dataset = DiagramDataset(get_samples().glob(\"*.jp2\"), position=position_func)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fad1b9fa",
   "metadata": {},
   "source": [
    "### Access to one diagram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ea2bb282",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "from index  0: Diagram(img_00.jp2)\n",
      "from index  1: Diagram(img_01.jp2)\n",
      "from index -1: Diagram(img_99.jp2)\n",
      "from index -2: Diagram(img_98.jp2)\n",
      "The diagram of index 100 is not in the dataset\n",
      "tensor([[1340000., 3020000.],\n",
      "        [2140000.,  180000.]])\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "a Tensor with 2 elements cannot be converted to Scalar",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_30879/1628813650.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# from the grid position (argument grid has to be provided)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"from coord (200, 60): {repr(dataset[200, 60])}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/bourinix/documents/boulot/2024_esrf/code/laueimproc/laueimproc/classes/dataset.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, item)\u001b[0m\n\u001b[1;32m    151\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"only 2d position allow, not {len(item)}d\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReal\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_diagram_from_coord\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"only int, slices and tuple[float, float] are allowed, not {item}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/bourinix/documents/boulot/2024_esrf/code/laueimproc/laueimproc/classes/dataset.py\u001b[0m in \u001b[0;36m_get_diagram_from_coord\u001b[0;34m(self, first_idx, second_idx)\u001b[0m\n\u001b[1;32m    238\u001b[0m             \u001b[0mdist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_position\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcoord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 240\u001b[0;31m             \u001b[0mpos\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    241\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    242\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_position\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: a Tensor with 2 elements cannot be converted to Scalar"
     ]
    }
   ],
   "source": [
    "# from the diagram index\n",
    "print(f\"from index  0: {repr(dataset[0])}\")\n",
    "print(f\"from index  1: {repr(dataset[1])}\")\n",
    "print(f\"from index -1: {repr(dataset[-1])}\")\n",
    "print(f\"from index -2: {repr(dataset[-2])}\")\n",
    "try:\n",
    "    dataset[100]\n",
    "except IndexError as err:\n",
    "    print(err)\n",
    "\n",
    "# from the grid position (argument grid has to be provided)\n",
    "print(f\"from coord (200, 60): {repr(dataset[200, 60])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "007af1c4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
